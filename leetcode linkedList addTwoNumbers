Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

---------------------------------------------------------
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        total = 0
        carry = 0  # number to carry when doing addition
        r = 0      # remainder
        sumArry = []

        list1 = l1    #if l1 != None else 0
        list2 = l2    #if l2 != None else 0

        if list1 == None and list2 == None:
            return 0

        # Adding sums of each Node to each other from Linked Lists
        while list1 or list2 or carry:
            total = 0
            if list1:
                print('if list1')
                total += list1.val
                list1 = list1.next
            if list2:
                print('if list2')
                total += list2.val
                list2 = list2.next
                print(total)

            total += carry
            carry = 0

            print(carry)

            if total > 9:
                r = total%10
                carry = total // 10
                total = r

            sumArry.append(total)


        print(sumArry)

        # Turn the sums that were stored into a array into List Nodes
        sumLL = l4 = ListNode(sumArry[0])
        for i in range(len(sumArry) - 1):
            if i+1 <= len(sumArry) - 1:
                l4.next = ListNode(sumArry[i+1])
                l4 = l4.next
                # print(sumLL)


        return sumLL
