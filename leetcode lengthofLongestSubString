Longest Substring Without Repeating Characters

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
-----------------------------------------------------------------------------------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        d = {}

        stringLength = len(s)
        substringLength = 0
        longest = 0
        start = 0

        if s == "":
            return 0
        if len(s) == 1:
            return 1

        for i in range(stringLength):
            if s[i] not in d or d[s[i]] < start:
                d[s[i]] = i
                longest = max(longest, i-start + 1)
            else:
                start = d[s[i]] + 1
                d[s[i]] = i

        print(d)
        return longest
