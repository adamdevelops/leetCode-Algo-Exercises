Longest Substring Without Repeating Characters

Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
-----------------------------------------------------------------------------------------------------
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        stringLength = len(s)

        subString = ""
        substringLength = 0
        longestString = 0
        start = 0
        nextltr = 1

        subString += s[start]

        while nextltr < stringLength:
            if s[start] != s[nextltr]:
                subString += s[nextltr]
                substringLength = len(subString)
                nextltr += 1
            else:
                print('else')
                longestString = substringLength
                start += 1
                nextltr += 1
                subString = s[start]
            print(substringLength)
            print(subString)

        longestString = len(subString)

        return longestString
